#!groovy

properties([
    parameters([
        booleanParam(name: 'RELEASE', description: 'Upload the new binaries to s3', defaultValue: false),
    ]),
    buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '15')),
    disableConcurrentBuilds(),
])

try {
    timeout(time: 30, unit: 'MINUTES') {
        node('nami_debian_agent') {
            env.JOB_WORKSPACE = "${env.HOME}/workspace/${env.JOB_NAME}/${env.BUILD_ID}"
            ws(env.JOB_WORKSPACE) {
                ansiColor {
                    def version = ""
                    def binariesOutput = "${pwd()}/bnhelper-binaries"
                    def originalBinaries = [
                        windows: "bnhelper-windows-x64.exe",
                        linux: "bnhelper-linux-x64.run",
                        osx: "bnhelper-osx-x64",
                    ]
                    dir('bnhelper') {
                        stage('Initialize') {
                            checkout scm
                            version = readFile(file: 'VERSION').trim()
                            sh "mkdir -p '${binariesOutput}'"
                        }
                        def binariesWithVersion = [
                            windows: "bnhelper-${version}-windows-x64.exe",
                            linux: "bnhelper-${version}-linux-x64.run",
                            osx: "bnhelper-${version}-osx-x64",
                        ]
                        stage('Build') {
                            withGcloudDockerCredentials {
                                withBazel([
                                    dockerExtraOpts: "-v '${binariesOutput}:/bnhelper-binaries:rw'",
                                ]) {
                                    sh """
                                        bazel build //...
                                        ls -1d bazel-bin/bnhelper-* | grep -v runfiles | xargs -I % cp -pfv % /bnhelper-binaries
                                    """
                                }
                            }
                        }
                        stage('Test') {
                            def linuxBinary = "${binariesOutput}/${originalBinaries.linux}"
                            sh '''
                                sudo apt-get update
                                sudo apt-get install -y expect tmux
                            '''
                            dir('tests') {
                                timeout(120) {
                                    sh """
                                        tmux new-session -s bnhelper_test -d -x 100 -y 100 "./test.sh '${linuxBinary}' |& tee /tmp/bnhelper_tests_output"
                                        while [ ! -f /tmp/bnhelper_exit_code ]; do sleep 5; done
                                        cat /tmp/bnhelper_tests_output
                                        exit \$(cat /tmp/bnhelper_exit_code)
                                    """
                                }
                            }
                        }
                        stage('Release') {
                            dir(binariesOutput) {
                                // Only copy the target files
                                sh """
                                    mkdir '${version}'
                                """
                                for (platform in originalBinaries.keySet()) {
                                    sh "mv '${originalBinaries[platform]}' '${version}/${binariesWithVersion[platform]}'"
                                }
                                archiveArtifacts artifacts: "${version}/*", fingerprint: true

                                if (params.RELEASE) {
                                    String s3cfgCurrentFile = "${env.HOME}/.s3cfg"
                                    Boolean backup = false
                                    if (fileExists(s3cfgCurrentFile)) {
                                        sh "mv ${s3cfgCurrentFile} ${s3cfgCurrentFile}.bak"
                                        backup = false
                                    }
                                    try {
                                        withCredentials([
                                            usernamePassword(credentialsId: 'ami-credentials-iam', usernameVariable: 'ACCESS_KEY', passwordVariable: 'SECRET_KEY'),
                                        ]) {
                                            String s3cfgFile = "${env.HOME}/.s3cfg-ami-credentials"
                                            sh """
                                                cat <<EOF >'${s3cfgFile}'
[default]
access_key = ${ACCESS_KEY}
secret_key = ${SECRET_KEY}
EOF
                                            """
                                            sh "ln -sf '${s3cfgFile}' '${s3cfgCurrentFile}'"
                                            try {
                                                block()
                                                sh """
                                                    s3cmd put --recursive '${version}/*' s3://bitnami-autobuild-ondemand/installers/stable/
                                                """
                                            } finally {
                                                sh "unlink '${s3cfgCurrentFile}'"
                                            }
                                        }
                                    } finally {
                                        sh "rm '${s3cfgFile}'"
                                        if (backup) {
                                            sh "mv '${s3cfgCurrentFile}.bak' '${s3cfgCurrentFile}'"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} catch (e) {
    // slackSend() ... etc
    throw e
}
