#!groovy

properties([
    parameters([
        booleanParam(name: 'RELEASE', description: 'Upload the new binaries to s3', defaultValue: false),
    ]),
    buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '15')),
    disableConcurrentBuilds(),
])

try {
    timeout(time: 30, unit: 'MINUTES') {
        node('nami_debian_agent') {
            env.JOB_WORKSPACE = "${env.HOME}/workspace/${env.JOB_NAME}/${env.BUILD_ID}"
            ws(env.JOB_WORKSPACE) {
                ansiColor {
                    def version = ""
                    def binariesOutput = "${pwd()}/bitnami-tui-binaries"
                    def binaries = [
                        windows: "bitnami-tui-windows-x64.exe",
                        linux: "bitnami-tui-linux-x64.run",
                        osx: "bitnami-tui-osx-x64",
                    ]
                    dir('bitnami-tui') {
                        stage('Initialize') {
                            checkout scm
                            version = readFile(file: 'VERSION').trim()
                            sh "mkdir -p '${binariesOutput}'"
                        }
                        stage('Build') {
                            withGcloudDockerCredentials {
                                withBazel([
                                    dockerExtraOpts: "-v '${binariesOutput}:/bitnami-tui-binaries:rw'",
                                ]) {
                                    sh """
                                        bazel build //...
                                        ls -1d bazel-bin/bitnami-tui-* | grep -v runfiles | xargs -I % cp -pfv % /bitnami-tui-binaries
                                    """
                                }
                            }
                        }
                        stage('Test') {
                            def linuxBinary = "${binariesOutput}/${binaries.linux}"
                            sh '''
                                sudo apt-get update
                                sudo apt-get install -y expect
                            '''
                            dir('tests') {
                                sh """
                                    ./test.sh '${linuxBinary}'
                                """
                            }
                        }
                    }
                    dir(binariesOutput) {
                        stage('Release') {
                            sh """
                                echo '${version}' >latest
                                mkdir '${version}'
                            """
                            // Only copy the target files
                            for (platform in binaries.keySet()) {
                                sh "mv '${binaries[platform]}' '${version}/'"
                            }
                            archiveArtifacts artifacts: "${version}/*", fingerprint: true

                            if (params.RELEASE) {
                                // TODO(jota)
                                // sh """
                                //     s3cmd put latest s3://some-bucket/bitnami-tui/
                                //     s3cmd put --recursive '${version}' s3://some-bucket/bitnami-tui/
                                // """
                            }
                        }
                    }
                }
            }
        }
    }
} catch (e) {
    // slackSend() ... etc
    throw e
}
